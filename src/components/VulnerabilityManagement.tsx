import React, { useState, useEffect } from 'react';
import { Shield, AlertTriangle, Search, Download, Eye, Zap, RefreshCw, Server, Bug, TrendingUp, Clock, CheckCircle, XCircle, Settings, Filter, Database, Activity, Target, Wrench } from 'lucide-react';
import { useAlert } from '../contexts/AlertContext';
import { Vulnerability, VulnerabilityAssessment, ScannerIntegration, PatchManagement } from '../types';
import { VulnerabilityEngine } from '../utils/vulnerabilityManagement';

interface VulnerabilityManagementProps {
  onNavigate: (page: string) => void;
}

const VulnerabilityManagement: React.FC<VulnerabilityManagementProps> = ({ onNavigate }) => {
  const [vulnerabilities, setVulnerabilities] = useState<Vulnerability[]>([]);
  const [assessments, setAssessments] = useState<VulnerabilityAssessment[]>([]);
  const [scanners, setScanners] = useState<ScannerIntegration[]>([]);
  const [patches, setPatches] = useState<PatchManagement[]>([]);
  const [selectedVuln, setSelectedVuln] = useState<Vulnerability | null>(null);
  const [activeTab, setActiveTab] = useState<'vulnerabilities' | 'assessments' | 'scanners' | 'patches'>('vulnerabilities');
  const [filter, setFilter] = useState<'all' | 'critical' | 'high' | 'medium' | 'low'>('all');
  const [statusFilter, setStatusFilter] = useState<'all' | 'open' | 'in_progress' | 'patched'>('all');
  const [isScanning, setIsScanning] = useState(false);
  const { addAlert } = useAlert();

  const vulnEngine = new VulnerabilityEngine();

  useEffect(() => {
    loadMockData();
  }, []);

  const loadMockData = () => {
    // Mock vulnerabilities
    const mockVulnerabilities: Vulnerability[] = [
      {
        id: 'VULN-001',
        cveId: 'CVE-2024-1234',
        title: 'Remote Code Execution in Apache HTTP Server',
        description: 'A critical vulnerability allows remote attackers to execute arbitrary code through malformed HTTP requests',
        severity: 'critical',
        cvssScore: 9.8,
        cvssVector: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H',
        exploitability: 'high',
        impact: 'critical',
        affectedSystems: ['web-server-01', 'web-server-02', 'api-gateway'],
        affectedSoftware: ['Apache HTTP Server 2.4.41', 'Apache HTTP Server 2.4.43'],
        discoveredDate: new Date(Date.now() - 86400000),
        publishedDate: new Date(Date.now() - 172800000),
        lastModified: new Date(Date.now() - 43200000),
        status: 'open',
        assignedTo: 'Security Team',
        dueDate: new Date(Date.now() + 259200000), // 3 days
        patchAvailable: true,
        patchComplexity: 'medium',
        businessCriticality: 'critical',
        exploitInWild: true,
        references: [
          'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-1234',
          'https://httpd.apache.org/security/vulnerabilities_24.html'
        ],
        tags: ['rce', 'apache', 'web-server', 'critical'],
        remediationSteps: [
          'Update Apache HTTP Server to version 2.4.58 or later',
          'Apply security patches immediately',
          'Restart web services',
          'Verify patch installation'
        ],
        riskScore: 95,
        scannerSource: 'Nessus Professional'
      },
      {
        id: 'VULN-002',
        cveId: 'CVE-2024-5678',
        title: 'SQL Injection in Customer Portal',
        description: 'SQL injection vulnerability in customer login form allows unauthorized database access',
        severity: 'high',
        cvssScore: 8.1,
        cvssVector: 'CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:N',
        exploitability: 'medium',
        impact: 'high',
        affectedSystems: ['customer-portal', 'database-01'],
        affectedSoftware: ['Custom Web Application v2.1'],
        discoveredDate: new Date(Date.now() - 259200000),
        lastModified: new Date(Date.now() - 86400000),
        status: 'in_progress',
        assignedTo: 'Development Team',
        dueDate: new Date(Date.now() + 604800000), // 7 days
        patchAvailable: false,
        patchComplexity: 'high',
        businessCriticality: 'high',
        exploitInWild: false,
        references: ['Internal Security Assessment Report'],
        tags: ['sql-injection', 'web-app', 'database'],
        remediationSteps: [
          'Implement parameterized queries',
          'Add input validation',
          'Update web application framework',
          'Conduct security code review'
        ],
        workarounds: [
          'Implement WAF rules to block SQL injection attempts',
          'Monitor database access logs',
          'Restrict database user permissions'
        ],
        riskScore: 78,
        scannerSource: 'OWASP ZAP'
      },
      {
        id: 'VULN-003',
        cveId: 'CVE-2024-9012',
        title: 'Outdated SSL/TLS Configuration',
        description: 'Web servers using deprecated SSL/TLS protocols and weak cipher suites',
        severity: 'medium',
        cvssScore: 5.3,
        cvssVector: 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N',
        exploitability: 'low',
        impact: 'medium',
        affectedSystems: ['web-server-03', 'mail-server'],
        affectedSoftware: ['OpenSSL 1.0.2', 'Nginx 1.14'],
        discoveredDate: new Date(Date.now() - 432000000),
        lastModified: new Date(Date.now() - 172800000),
        status: 'patched',
        assignedTo: 'Infrastructure Team',
        patchAvailable: true,
        patchComplexity: 'low',
        businessCriticality: 'medium',
        exploitInWild: false,
        references: [
          'https://www.openssl.org/news/secadv/20240101.txt',
          'https://nginx.org/en/security_advisories.html'
        ],
        tags: ['ssl', 'tls', 'encryption', 'configuration'],
        remediationSteps: [
          'Update SSL/TLS configuration',
          'Disable weak cipher suites',
          'Enable modern TLS protocols only',
          'Test SSL configuration'
        ],
        riskScore: 45,
        scannerSource: 'Qualys SSL Labs'
      }
    ];

    // Mock assessments
    const mockAssessments: VulnerabilityAssessment[] = [
      {
        id: 'ASSESS-001',
        name: 'Monthly Infrastructure Scan',
        description: 'Comprehensive vulnerability assessment of all network infrastructure',
        targetSystems: ['all-servers', 'network-devices', 'workstations'],
        scanType: 'infrastructure',
        status: 'completed',
        startTime: new Date(Date.now() - 7200000),
        endTime: new Date(Date.now() - 3600000),
        progress: 100,
        vulnerabilitiesFound: 47,
        criticalCount: 2,
        highCount: 8,
        mediumCount: 15,
        lowCount: 22,
        scannerUsed: 'Nessus Professional',
        configuration: { scan_policy: 'Advanced', credentials: true }
      },
      {
        id: 'ASSESS-002',
        name: 'Web Application Security Test',
        description: 'OWASP Top 10 security assessment for customer-facing applications',
        targetSystems: ['customer-portal', 'api-gateway', 'admin-panel'],
        scanType: 'web_app',
        status: 'running',
        startTime: new Date(Date.now() - 1800000),
        progress: 65,
        vulnerabilitiesFound: 12,
        criticalCount: 0,
        highCount: 3,
        mediumCount: 5,
        lowCount: 4,
        scannerUsed: 'OWASP ZAP',
        configuration: { spider_depth: 5, active_scan: true }
      }
    ];

    // Mock scanners
    const mockScanners: ScannerIntegration[] = [
      {
        id: 'SCANNER-001',
        name: 'Nessus Professional',
        type: 'nessus',
        status: 'active',
        endpoint: 'https://nessus.company.com:8834',
        lastSync: new Date(Date.now() - 3600000),
        capabilities: ['network_scan', 'web_app_scan', 'compliance_scan'],
        configuration: { max_concurrent_scans: 5, scan_timeout: 3600 },
        credentialsConfigured: true,
        scanTemplates: [
          { id: 'T1', name: 'Basic Network Scan', description: 'Standard network vulnerability scan', scanType: 'network', configuration: {}, estimatedDuration: 60 },
          { id: 'T2', name: 'Advanced Scan', description: 'Comprehensive scan with credentials', scanType: 'network', configuration: {}, estimatedDuration: 120 }
        ]
      },
      {
        id: 'SCANNER-002',
        name: 'OpenVAS',
        type: 'openvas',
        status: 'active',
        endpoint: 'https://openvas.company.com:9392',
        lastSync: new Date(Date.now() - 7200000),
        capabilities: ['network_scan', 'compliance_scan'],
        configuration: { max_hosts: 256, timeout: 7200 },
        credentialsConfigured: true,
        scanTemplates: [
          { id: 'T3', name: 'Full and Fast', description: 'Comprehensive vulnerability scan', scanType: 'network', configuration: {}, estimatedDuration: 90 }
        ]
      }
    ];

    // Mock patches
    const mockPatches: PatchManagement[] = [
      {
        id: 'PATCH-001',
        vulnerabilityId: 'VULN-001',
        patchId: 'APACHE-2024-001',
        patchName: 'Apache HTTP Server Security Update',
        vendor: 'Apache Software Foundation',
        releaseDate: new Date(Date.now() - 86400000),
        severity: 'critical',
        status: 'approved',
        affectedSystems: ['web-server-01', 'web-server-02'],
        deploymentWindow: new Date(Date.now() + 86400000),
        rollbackPlan: 'Automated rollback to previous version if issues detected',
        testResults: 'Passed all regression tests in staging environment',
        approvedBy: 'Security Manager',
        successRate: 95
      },
      {
        id: 'PATCH-002',
        vulnerabilityId: 'VULN-003',
        patchId: 'SSL-CONFIG-001',
        patchName: 'SSL/TLS Configuration Update',
        vendor: 'Internal',
        releaseDate: new Date(Date.now() - 172800000),
        severity: 'medium',
        status: 'deployed',
        affectedSystems: ['web-server-03', 'mail-server'],
        deploymentDate: new Date(Date.now() - 86400000),
        deployedBy: 'Infrastructure Team',
        successRate: 100
      }
    ];

    setVulnerabilities(mockVulnerabilities);
    setAssessments(mockAssessments);
    setScanners(mockScanners);
    setPatches(mockPatches);
  };

  const startVulnerabilityAssessment = async (scannerId: string, targets: string[]) => {
    setIsScanning(true);
    
    try {
      const result = await vulnEngine.startAssessment(scannerId, targets);
      
      const newAssessment: VulnerabilityAssessment = {
        id: `ASSESS-${Date.now()}`,
        name: `On-Demand Scan - ${new Date().toLocaleString()}`,
        description: 'User-initiated vulnerability assessment',
        targetSystems: targets,
        scanType: 'infrastructure',
        status: 'running',
        startTime: new Date(),
        progress: 0,
        vulnerabilitiesFound: 0,
        criticalCount: 0,
        highCount: 0,
        mediumCount: 0,
        lowCount: 0,
        scannerUsed: scanners.find(s => s.id === scannerId)?.name || 'Unknown',
        configuration: result.configuration
      };
      
      setAssessments(prev => [newAssessment, ...prev]);
      
      // Simulate scan progress
      simulateScanProgress(newAssessment.id);
      
    } catch (error) {
      console.error('Failed to start assessment:', error);
    } finally {
      setIsScanning(false);
    }
  };

  const simulateScanProgress = (assessmentId: string) => {
    const interval = setInterval(() => {
      setAssessments(prev => prev.map(assessment => {
        if (assessment.id === assessmentId && assessment.status === 'running') {
          const newProgress = Math.min(assessment.progress + Math.random() * 15, 100);
          const isComplete = newProgress >= 100;
          
          return {
            ...assessment,
            progress: newProgress,
            status: isComplete ? 'completed' : 'running',
            endTime: isComplete ? new Date() : undefined,
            vulnerabilitiesFound: isComplete ? Math.floor(Math.random() * 20) + 5 : assessment.vulnerabilitiesFound,
            criticalCount: isComplete ? Math.floor(Math.random() * 3) : assessment.criticalCount,
            highCount: isComplete ? Math.floor(Math.random() * 5) + 2 : assessment.highCount,
            mediumCount: isComplete ? Math.floor(Math.random() * 8) + 3 : assessment.mediumCount,
            lowCount: isComplete ? Math.floor(Math.random() * 10) + 5 : assessment.lowCount
          };
        }
        return assessment;
      }));
    }, 2000);

    // Stop simulation after 30 seconds
    setTimeout(() => clearInterval(interval), 30000);
  };

  const calculateRiskScore = (vuln: Vulnerability): number => {
    return vulnEngine.calculateRiskScore(vuln);
  };

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'critical': return 'text-red-400 bg-red-500/20 border-red-500/30';
      case 'high': return 'text-orange-400 bg-orange-500/20 border-orange-500/30';
      case 'medium': return 'text-yellow-400 bg-yellow-500/20 border-yellow-500/30';
      case 'low': return 'text-blue-400 bg-blue-500/20 border-blue-500/30';
      default: return 'text-gray-400 bg-gray-500/20 border-gray-500/30';
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'open': return 'text-red-400 bg-red-500/20 border-red-500/30';
      case 'in_progress': return 'text-yellow-400 bg-yellow-500/20 border-yellow-500/30';
      case 'patched': return 'text-green-400 bg-green-500/20 border-green-500/30';
      case 'mitigated': return 'text-blue-400 bg-blue-500/20 border-blue-500/30';
      case 'accepted_risk': return 'text-gray-400 bg-gray-500/20 border-gray-500/30';
      default: return 'text-gray-400 bg-gray-500/20 border-gray-500/30';
    }
  };

  const filteredVulnerabilities = vulnerabilities.filter(vuln => {
    const severityMatch = filter === 'all' || vuln.severity === filter;
    const statusMatch = statusFilter === 'all' || vuln.status === statusFilter;
    return severityMatch && statusMatch;
  });

  const criticalVulns = vulnerabilities.filter(v => v.severity === 'critical').length;
  const openVulns = vulnerabilities.filter(v => v.status === 'open').length;
  const patchedVulns = vulnerabilities.filter(v => v.status === 'patched').length;

  return (
    <div className="min-h-screen bg-gradient-to-br from-black via-gray-900 to-black">
      <div className="absolute inset-0 bg-[radial-gradient(circle_at_40%_60%,rgba(168,85,247,0.1),transparent)] pointer-events-none" />
      
      <div className="relative max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Header */}
        <div className="text-center mb-8">
          <h1 className="text-4xl font-bold bg-gradient-to-r from-purple-400 to-blue-500 bg-clip-text text-transparent mb-2">
            🛡️ Vulnerability Management
          </h1>
          <p className="text-gray-300">Comprehensive vulnerability assessment and patch management</p>
        </div>

        {/* Metrics Dashboard */}
        <div className="grid grid-cols-2 lg:grid-cols-5 gap-6 mb-8">
          <div className="bg-red-500/10 border border-red-500/20 rounded-2xl p-6">
            <div className="flex items-center justify-between mb-4">
              <AlertTriangle className="w-8 h-8 text-red-400" />
              <div className="text-right">
                <div className="text-2xl font-bold text-white">{criticalVulns}</div>
                <div className="text-sm text-red-400">Critical</div>
              </div>
            </div>
            <div className="text-xs text-gray-400">High priority vulnerabilities</div>
          </div>

          <div className="bg-orange-500/10 border border-orange-500/20 rounded-2xl p-6">
            <div className="flex items-center justify-between mb-4">
              <Bug className="w-8 h-8 text-orange-400" />
              <div className="text-right">
                <div className="text-2xl font-bold text-white">{openVulns}</div>
                <div className="text-sm text-orange-400">Open</div>
              </div>
            </div>
            <div className="text-xs text-gray-400">Unresolved vulnerabilities</div>
          </div>

          <div className="bg-green-500/10 border border-green-500/20 rounded-2xl p-6">
            <div className="flex items-center justify-between mb-4">
              <CheckCircle className="w-8 h-8 text-green-400" />
              <div className="text-right">
                <div className="text-2xl font-bold text-white">{patchedVulns}</div>
                <div className="text-sm text-green-400">Patched</div>
              </div>
            </div>
            <div className="text-xs text-gray-400">Successfully remediated</div>
          </div>

          <div className="bg-blue-500/10 border border-blue-500/20 rounded-2xl p-6">
            <div className="flex items-center justify-between mb-4">
              <Target className="w-8 h-8 text-blue-400" />
              <div className="text-right">
                <div className="text-2xl font-bold text-white">{assessments.length}</div>
                <div className="text-sm text-blue-400">Scans</div>
              </div>
            </div>
            <div className="text-xs text-gray-400">Total assessments</div>
          </div>

          <div className="bg-purple-500/10 border border-purple-500/20 rounded-2xl p-6">
            <div className="flex items-center justify-between mb-4">
              <Database className="w-8 h-8 text-purple-400" />
              <div className="text-right">
                <div className="text-2xl font-bold text-white">{scanners.filter(s => s.status === 'active').length}</div>
                <div className="text-sm text-purple-400">Scanners</div>
              </div>
            </div>
            <div className="text-xs text-gray-400">Active integrations</div>
          </div>
        </div>

        {/* Tab Navigation */}
        <div className="bg-gray-900/50 backdrop-blur-xl border border-gray-700/50 rounded-2xl p-2 mb-8">
          <div className="flex space-x-2">
            <button
              onClick={() => setActiveTab('vulnerabilities')}
              className={`flex-1 px-6 py-3 rounded-xl font-medium transition-all duration-200 ${
                activeTab === 'vulnerabilities'
                  ? 'bg-purple-500/20 text-purple-400 border border-purple-500/30'
                  : 'text-gray-400 hover:text-white hover:bg-gray-700/30'
              }`}
            >
              🐛 Vulnerabilities
            </button>
            <button
              onClick={() => setActiveTab('assessments')}
              className={`flex-1 px-6 py-3 rounded-xl font-medium transition-all duration-200 ${
                activeTab === 'assessments'
                  ? 'bg-blue-500/20 text-blue-400 border border-blue-500/30'
                  : 'text-gray-400 hover:text-white hover:bg-gray-700/30'
              }`}
            >
              🎯 Assessments
            </button>
            <button
              onClick={() => setActiveTab('scanners')}
              className={`flex-1 px-6 py-3 rounded-xl font-medium transition-all duration-200 ${
                activeTab === 'scanners'
                  ? 'bg-green-500/20 text-green-400 border border-green-500/30'
                  : 'text-gray-400 hover:text-white hover:bg-gray-700/30'
              }`}
            >
              🔍 Scanners
            </button>
            <button
              onClick={() => setActiveTab('patches')}
              className={`flex-1 px-6 py-3 rounded-xl font-medium transition-all duration-200 ${
                activeTab === 'patches'
                  ? 'bg-orange-500/20 text-orange-400 border border-orange-500/30'
                  : 'text-gray-400 hover:text-white hover:bg-gray-700/30'
              }`}
            >
              🔧 Patches
            </button>
          </div>
        </div>

        {/* Vulnerabilities Tab */}
        {activeTab === 'vulnerabilities' && (
          <div className="bg-gray-900/50 backdrop-blur-xl border border-gray-700/50 rounded-2xl p-8">
            <div className="flex items-center justify-between mb-6">
              <h2 className="text-2xl font-bold text-white">Vulnerability Inventory</h2>
              
              <div className="flex space-x-4">
                <select
                  value={filter}
                  onChange={(e) => setFilter(e.target.value as any)}
                  className="px-4 py-2 bg-black/50 border border-gray-600 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-purple-500/50"
                >
                  <option value="all">All Severities</option>
                  <option value="critical">Critical</option>
                  <option value="high">High</option>
                  <option value="medium">Medium</option>
                  <option value="low">Low</option>
                </select>
                
                <select
                  value={statusFilter}
                  onChange={(e) => setStatusFilter(e.target.value as any)}
                  className="px-4 py-2 bg-black/50 border border-gray-600 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-purple-500/50"
                >
                  <option value="all">All Statuses</option>
                  <option value="open">Open</option>
                  <option value="in_progress">In Progress</option>
                  <option value="patched">Patched</option>
                </select>
              </div>
            </div>

            <div className="space-y-4">
              {filteredVulnerabilities.map((vuln) => (
                <div
                  key={vuln.id}
                  onClick={() => setSelectedVuln(vuln)}
                  className={`border rounded-xl p-6 cursor-pointer transition-all duration-200 hover:scale-[1.02] ${
                    getSeverityColor(vuln.severity)
                  }`}
                >
                  <div className="flex items-start justify-between mb-4">
                    <div>
                      <div className="flex items-center space-x-3 mb-2">
                        <h3 className="text-lg font-bold text-white">{vuln.title}</h3>
                        <span className={`px-2 py-1 rounded border text-xs font-medium ${getSeverityColor(vuln.severity)}`}>
                          {vuln.severity.toUpperCase()}
                        </span>
                        <span className={`px-2 py-1 rounded border text-xs font-medium ${getStatusColor(vuln.status)}`}>
                          {vuln.status.replace('_', ' ').toUpperCase()}
                        </span>
                      </div>
                      <p className="text-gray-300 mb-2">{vuln.description}</p>
                      <div className="text-sm text-gray-400">
                        {vuln.cveId} • CVSS: {vuln.cvssScore} • Risk Score: {vuln.riskScore}
                      </div>
                    </div>
                    
                    <div className="text-right">
                      <div className="text-sm text-gray-400">
                        Discovered: {vuln.discoveredDate.toLocaleDateString()}
                      </div>
                      {vuln.dueDate && (
                        <div className="text-sm text-orange-400">
                          Due: {vuln.dueDate.toLocaleDateString()}
                        </div>
                      )}
                    </div>
                  </div>

                  <div className="flex items-center justify-between">
                    <div className="flex space-x-4 text-sm">
                      <span className="text-gray-400">
                        Affected Systems: {vuln.affectedSystems.length}
                      </span>
                      <span className="text-gray-400">
                        Scanner: {vuln.scannerSource}
                      </span>
                      {vuln.exploitInWild && (
                        <span className="text-red-400 font-medium">
                          🚨 Exploit in Wild
                        </span>
                      )}
                    </div>
                    
                    <div className="flex space-x-2">
                      {vuln.patchAvailable && (
                        <span className="px-2 py-1 bg-green-500/20 text-green-400 rounded text-xs">
                          Patch Available
                        </span>
                      )}
                      <button
                        onClick={(e) => {
                          e.stopPropagation();
                          setSelectedVuln(vuln);
                        }}
                        className="px-3 py-1 bg-blue-500/20 hover:bg-blue-500/30 text-blue-400 rounded text-xs transition-colors flex items-center space-x-1"
                      >
                        <Eye className="w-3 h-3" />
                        <span>Details</span>
                      </button>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}

        {/* Assessments Tab */}
        {activeTab === 'assessments' && (
          <div className="bg-gray-900/50 backdrop-blur-xl border border-gray-700/50 rounded-2xl p-8">
            <div className="flex items-center justify-between mb-6">
              <h2 className="text-2xl font-bold text-white">Vulnerability Assessments</h2>
              
              <button
                onClick={() => startVulnerabilityAssessment('SCANNER-001', ['all-systems'])}
                disabled={isScanning}
                className="px-6 py-3 bg-blue-500/20 hover:bg-blue-500/30 text-blue-400 rounded-lg transition-colors disabled:opacity-50 flex items-center space-x-2"
              >
                {isScanning ? (
                  <>
                    <div className="animate-spin rounded-full h-4 w-4 border-2 border-blue-400 border-t-transparent" />
                    <span>Starting Scan...</span>
                  </>
                ) : (
                  <>
                    <Search className="w-4 h-4" />
                    <span>Start Assessment</span>
                  </>
                )}
              </button>
            </div>

            <div className="space-y-6">
              {assessments.map((assessment) => (
                <div key={assessment.id} className="bg-black/30 border border-gray-700/50 rounded-xl p-6">
                  <div className="flex items-start justify-between mb-4">
                    <div>
                      <h3 className="text-lg font-bold text-white mb-2">{assessment.name}</h3>
                      <p className="text-gray-300 mb-2">{assessment.description}</p>
                      <div className="text-sm text-gray-400">
                        Scanner: {assessment.scannerUsed} • Type: {assessment.scanType}
                      </div>
                    </div>
                    
                    <div className="text-right">
                      <span className={`px-3 py-1 rounded border text-sm font-medium ${
                        assessment.status === 'completed' ? 'bg-green-500/20 text-green-400 border-green-500/30' :
                        assessment.status === 'running' ? 'bg-yellow-500/20 text-yellow-400 border-yellow-500/30' :
                        assessment.status === 'failed' ? 'bg-red-500/20 text-red-400 border-red-500/30' :
                        'bg-blue-500/20 text-blue-400 border-blue-500/30'
                      }`}>
                        {assessment.status.toUpperCase()}
                      </span>
                    </div>
                  </div>

                  {assessment.status === 'running' && (
                    <div className="mb-4">
                      <div className="flex justify-between text-sm text-gray-400 mb-2">
                        <span>Progress</span>
                        <span>{Math.round(assessment.progress)}%</span>
                      </div>
                      <div className="w-full bg-gray-700 rounded-full h-2">
                        <div 
                          className="bg-blue-500 h-2 rounded-full transition-all duration-300"
                          style={{ width: `${assessment.progress}%` }}
                        />
                      </div>
                    </div>
                  )}

                  <div className="grid grid-cols-2 lg:grid-cols-5 gap-4 mb-4">
                    <div className="text-center">
                      <div className="text-2xl font-bold text-white">{assessment.vulnerabilitiesFound}</div>
                      <div className="text-xs text-gray-400">Total</div>
                    </div>
                    <div className="text-center">
                      <div className="text-2xl font-bold text-red-400">{assessment.criticalCount}</div>
                      <div className="text-xs text-gray-400">Critical</div>
                    </div>
                    <div className="text-center">
                      <div className="text-2xl font-bold text-orange-400">{assessment.highCount}</div>
                      <div className="text-xs text-gray-400">High</div>
                    </div>
                    <div className="text-center">
                      <div className="text-2xl font-bold text-yellow-400">{assessment.mediumCount}</div>
                      <div className="text-xs text-gray-400">Medium</div>
                    </div>
                    <div className="text-center">
                      <div className="text-2xl font-bold text-blue-400">{assessment.lowCount}</div>
                      <div className="text-xs text-gray-400">Low</div>
                    </div>
                  </div>

                  <div className="flex items-center justify-between text-sm text-gray-400">
                    <div>
                      {assessment.startTime && (
                        <span>Started: {assessment.startTime.toLocaleString()}</span>
                      )}
                      {assessment.endTime && (
                        <span> • Completed: {assessment.endTime.toLocaleString()}</span>
                      )}
                    </div>
                    
                    {assessment.status === 'completed' && (
                      <button className="px-3 py-1 bg-green-500/20 hover:bg-green-500/30 text-green-400 rounded text-xs transition-colors flex items-center space-x-1">
                        <Download className="w-3 h-3" />
                        <span>Download Report</span>
                      </button>
                    )}
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}

        {/* Scanners Tab */}
        {activeTab === 'scanners' && (
          <div className="bg-gray-900/50 backdrop-blur-xl border border-gray-700/50 rounded-2xl p-8">
            <div className="flex items-center justify-between mb-6">
              <h2 className="text-2xl font-bold text-white">Scanner Integrations</h2>
              
              <button className="px-6 py-3 bg-green-500/20 hover:bg-green-500/30 text-green-400 rounded-lg transition-colors flex items-center space-x-2">
                <Database className="w-4 h-4" />
                <span>Add Scanner</span>
              </button>
            </div>

            <div className="grid md:grid-cols-2 gap-6">
              {scanners.map((scanner) => (
                <div key={scanner.id} className="bg-black/30 border border-gray-700/50 rounded-xl p-6">
                  <div className="flex items-center justify-between mb-4">
                    <div className="flex items-center space-x-3">
                      <Database className="w-8 h-8 text-green-400" />
                      <div>
                        <h3 className="text-lg font-bold text-white">{scanner.name}</h3>
                        <div className="text-sm text-gray-400">{scanner.type.toUpperCase()}</div>
                      </div>
                    </div>
                    
                    <div className="flex items-center space-x-2">
                      <div className={`w-3 h-3 rounded-full ${
                        scanner.status === 'active' ? 'bg-green-400 animate-pulse' :
                        scanner.status === 'error' ? 'bg-red-400' : 'bg-gray-400'
                      }`} />
                      <span className={`text-sm font-medium ${
                        scanner.status === 'active' ? 'text-green-400' :
                        scanner.status === 'error' ? 'text-red-400' : 'text-gray-400'
                      }`}>
                        {scanner.status.toUpperCase()}
                      </span>
                    </div>
                  </div>

                  <div className="space-y-3 mb-4">
                    <div className="text-sm">
                      <span className="text-gray-400">Endpoint: </span>
                      <span className="text-white font-mono">{scanner.endpoint}</span>
                    </div>
                    
                    <div className="text-sm">
                      <span className="text-gray-400">Last Sync: </span>
                      <span className="text-white">
                        {scanner.lastSync ? scanner.lastSync.toLocaleString() : 'Never'}
                      </span>
                    </div>
                    
                    <div className="text-sm">
                      <span className="text-gray-400">Credentials: </span>
                      <span className={scanner.credentialsConfigured ? 'text-green-400' : 'text-red-400'}>
                        {scanner.credentialsConfigured ? 'Configured' : 'Not Configured'}
                      </span>
                    </div>
                  </div>

                  <div className="mb-4">
                    <div className="text-sm text-gray-400 mb-2">Capabilities:</div>
                    <div className="flex flex-wrap gap-2">
                      {scanner.capabilities.map((capability, index) => (
                        <span key={index} className="px-2 py-1 bg-blue-500/20 text-blue-400 rounded text-xs">
                          {capability.replace('_', ' ')}
                        </span>
                      ))}
                    </div>
                  </div>

                  <div className="mb-4">
                    <div className="text-sm text-gray-400 mb-2">Scan Templates:</div>
                    <div className="space-y-1">
                      {scanner.scanTemplates.slice(0, 2).map((template) => (
                        <div key={template.id} className="text-sm text-gray-300">
                          • {template.name} ({template.estimatedDuration}min)
                        </div>
                      ))}
                      {scanner.scanTemplates.length > 2 && (
                        <div className="text-xs text-gray-400">
                          +{scanner.scanTemplates.length - 2} more templates
                        </div>
                      )}
                    </div>
                  </div>

                  <div className="flex space-x-2">
                    <button className="flex-1 px-3 py-2 bg-blue-500/20 hover:bg-blue-500/30 text-blue-400 rounded-lg transition-colors text-sm">
                      Test Connection
                    </button>
                    <button className="flex-1 px-3 py-2 bg-green-500/20 hover:bg-green-500/30 text-green-400 rounded-lg transition-colors text-sm">
                      Start Scan
                    </button>
                    <button className="px-3 py-2 bg-gray-600/20 hover:bg-gray-600/30 text-gray-400 rounded-lg transition-colors">
                      <Settings className="w-4 h-4" />
                    </button>
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}

        {/* Patches Tab */}
        {activeTab === 'patches' && (
          <div className="bg-gray-900/50 backdrop-blur-xl border border-gray-700/50 rounded-2xl p-8">
            <div className="flex items-center justify-between mb-6">
              <h2 className="text-2xl font-bold text-white">Patch Management</h2>
              
              <button className="px-6 py-3 bg-orange-500/20 hover:bg-orange-500/30 text-orange-400 rounded-lg transition-colors flex items-center space-x-2">
                <Wrench className="w-4 h-4" />
                <span>Deploy Patches</span>
              </button>
            </div>

            <div className="space-y-4">
              {patches.map((patch) => (
                <div key={patch.id} className="bg-black/30 border border-gray-700/50 rounded-xl p-6">
                  <div className="flex items-start justify-between mb-4">
                    <div>
                      <h3 className="text-lg font-bold text-white mb-2">{patch.patchName}</h3>
                      <div className="text-sm text-gray-400 mb-2">
                        Patch ID: {patch.patchId} • Vendor: {patch.vendor}
                      </div>
                      <div className="text-sm text-gray-400">
                        Vulnerability: {patch.vulnerabilityId} • Released: {patch.releaseDate.toLocaleDateString()}
                      </div>
                    </div>
                    
                    <div className="text-right">
                      <span className={`px-3 py-1 rounded border text-sm font-medium ${getSeverityColor(patch.severity)}`}>
                        {patch.severity.toUpperCase()}
                      </span>
                      <div className="mt-2">
                        <span className={`px-3 py-1 rounded border text-sm font-medium ${
                          patch.status === 'deployed' ? 'bg-green-500/20 text-green-400 border-green-500/30' :
                          patch.status === 'approved' ? 'bg-blue-500/20 text-blue-400 border-blue-500/30' :
                          patch.status === 'testing' ? 'bg-yellow-500/20 text-yellow-400 border-yellow-500/30' :
                          patch.status === 'failed' ? 'bg-red-500/20 text-red-400 border-red-500/30' :
                          'bg-gray-500/20 text-gray-400 border-gray-500/30'
                        }`}>
                          {patch.status.replace('_', ' ').toUpperCase()}
                        </span>
                      </div>
                    </div>
                  </div>

                  <div className="grid md:grid-cols-2 gap-6 mb-4">
                    <div>
                      <div className="text-sm text-gray-400 mb-2">Affected Systems:</div>
                      <div className="space-y-1">
                        {patch.affectedSystems.map((system, index) => (
                          <div key={index} className="text-sm text-gray-300 font-mono">
                            • {system}
                          </div>
                        ))}
                      </div>
                    </div>
                    
                    <div className="space-y-2">
                      {patch.deploymentWindow && (
                        <div className="text-sm">
                          <span className="text-gray-400">Deployment Window: </span>
                          <span className="text-white">{patch.deploymentWindow.toLocaleString()}</span>
                        </div>
                      )}
                      
                      {patch.deploymentDate && (
                        <div className="text-sm">
                          <span className="text-gray-400">Deployed: </span>
                          <span className="text-white">{patch.deploymentDate.toLocaleString()}</span>
                        </div>
                      )}
                      
                      {patch.successRate && (
                        <div className="text-sm">
                          <span className="text-gray-400">Success Rate: </span>
                          <span className="text-green-400">{patch.successRate}%</span>
                        </div>
                      )}
                    </div>
                  </div>

                  {patch.testResults && (
                    <div className="mb-4">
                      <div className="text-sm text-gray-400 mb-2">Test Results:</div>
                      <div className="bg-green-500/10 border border-green-500/20 rounded-lg p-3">
                        <div className="text-green-400 text-sm">{patch.testResults}</div>
                      </div>
                    </div>
                  )}

                  {patch.rollbackPlan && (
                    <div className="mb-4">
                      <div className="text-sm text-gray-400 mb-2">Rollback Plan:</div>
                      <div className="bg-blue-500/10 border border-blue-500/20 rounded-lg p-3">
                        <div className="text-blue-400 text-sm">{patch.rollbackPlan}</div>
                      </div>
                    </div>
                  )}

                  <div className="flex items-center justify-between text-sm text-gray-400">
                    <div>
                      {patch.approvedBy && (
                        <span>Approved by: {patch.approvedBy}</span>
                      )}
                      {patch.deployedBy && (
                        <span> • Deployed by: {patch.deployedBy}</span>
                      )}
                    </div>
                    
                    <div className="flex space-x-2">
                      {patch.status === 'available' && (
                        <button className="px-3 py-1 bg-blue-500/20 hover:bg-blue-500/30 text-blue-400 rounded text-xs transition-colors">
                          Approve
                        </button>
                      )}
                      {patch.status === 'approved' && (
                        <button className="px-3 py-1 bg-green-500/20 hover:bg-green-500/30 text-green-400 rounded text-xs transition-colors">
                          Deploy
                        </button>
                      )}
                      <button className="px-3 py-1 bg-gray-600/20 hover:bg-gray-600/30 text-gray-400 rounded text-xs transition-colors flex items-center space-x-1">
                        <Eye className="w-3 h-3" />
                        <span>Details</span>
                      </button>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}

        {/* Vulnerability Detail Modal */}
        {selectedVuln && (
          <div className="fixed inset-0 bg-black/80 backdrop-blur-sm flex items-center justify-center z-50 p-4">
            <div className="bg-gray-900 border border-gray-700 rounded-2xl p-8 max-w-6xl w-full max-h-[90vh] overflow-y-auto">
              <div className="flex items-center justify-between mb-6">
                <h3 className="text-2xl font-bold text-white">Vulnerability Details: {selectedVuln.id}</h3>
                <button
                  onClick={() => setSelectedVuln(null)}
                  className="text-gray-400 hover:text-white transition-colors"
                >
                  ✕
                </button>
              </div>

              <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
                {/* Left Column */}
                <div className="space-y-6">
                  {/* Basic Info */}
                  <div>
                    <h4 className="text-lg font-bold text-white mb-4">Vulnerability Information</h4>
                    <div className="space-y-3">
                      <div className="flex justify-between">
                        <span className="text-gray-400">CVE ID:</span>
                        <span className="text-white font-mono">{selectedVuln.cveId}</span>
                      </div>
                      <div className="flex justify-between">
                        <span className="text-gray-400">CVSS Score:</span>
                        <span className="text-white font-bold">{selectedVuln.cvssScore}</span>
                      </div>
                      <div className="flex justify-between">
                        <span className="text-gray-400">Risk Score:</span>
                        <span className="text-white font-bold">{selectedVuln.riskScore}</span>
                      </div>
                      <div className="flex justify-between">
                        <span className="text-gray-400">Severity:</span>
                        <span className={`px-2 py-1 rounded text-xs font-medium ${getSeverityColor(selectedVuln.severity)}`}>
                          {selectedVuln.severity.toUpperCase()}
                        </span>
                      </div>
                      <div className="flex justify-between">
                        <span className="text-gray-400">Status:</span>
                        <span className={`px-2 py-1 rounded text-xs font-medium ${getStatusColor(selectedVuln.status)}`}>
                          {selectedVuln.status.replace('_', ' ').toUpperCase()}
                        </span>
                      </div>
                    </div>
                  </div>

                  {/* Affected Systems */}
                  <div>
                    <h4 className="text-lg font-bold text-white mb-4">Affected Systems</h4>
                    <div className="space-y-2">
                      {selectedVuln.affectedSystems.map((system, index) => (
                        <div key={index} className="bg-black/30 rounded-lg p-3 flex items-center space-x-3">
                          <Server className="w-4 h-4 text-blue-400" />
                          <span className="text-white font-mono text-sm">{system}</span>
                        </div>
                      ))}
                    </div>
                  </div>

                  {/* Affected Software */}
                  <div>
                    <h4 className="text-lg font-bold text-white mb-4">Affected Software</h4>
                    <div className="space-y-2">
                      {selectedVuln.affectedSoftware.map((software, index) => (
                        <div key={index} className="bg-black/30 rounded-lg p-3">
                          <span className="text-white text-sm">{software}</span>
                        </div>
                      ))}
                    </div>
                  </div>
                </div>

                {/* Right Column */}
                <div className="space-y-6">
                  {/* Description */}
                  <div>
                    <h4 className="text-lg font-bold text-white mb-4">Description</h4>
                    <div className="bg-black/30 rounded-lg p-4">
                      <p className="text-gray-300 leading-relaxed">{selectedVuln.description}</p>
                    </div>
                  </div>

                  {/* CVSS Vector */}
                  {selectedVuln.cvssVector && (
                    <div>
                      <h4 className="text-lg font-bold text-white mb-4">CVSS Vector</h4>
                      <div className="bg-black/30 rounded-lg p-4">
                        <code className="text-green-400 text-sm font-mono">{selectedVuln.cvssVector}</code>
                      </div>
                    </div>
                  )}

                  {/* Remediation Steps */}
                  {selectedVuln.remediationSteps && (
                    <div>
                      <h4 className="text-lg font-bold text-white mb-4">Remediation Steps</h4>
                      <div className="bg-black/30 rounded-lg p-4">
                        <ol className="text-gray-300 space-y-2">
                          {selectedVuln.remediationSteps.map((step, index) => (
                            <li key={index} className="text-sm">
                              {index + 1}. {step}
                            </li>
                          ))}
                        </ol>
                      </div>
                    </div>
                  )}

                  {/* Workarounds */}
                  {selectedVuln.workarounds && (
                    <div>
                      <h4 className="text-lg font-bold text-white mb-4">Workarounds</h4>
                      <div className="bg-blue-500/10 border border-blue-500/20 rounded-lg p-4">
                        <ul className="text-blue-300 space-y-2">
                          {selectedVuln.workarounds.map((workaround, index) => (
                            <li key={index} className="text-sm">
                              • {workaround}
                            </li>
                          ))}
                        </ul>
                      </div>
                    </div>
                  )}

                  {/* References */}
                  <div>
                    <h4 className="text-lg font-bold text-white mb-4">References</h4>
                    <div className="space-y-2">
                      {selectedVuln.references.map((reference, index) => (
                        <div key={index} className="bg-black/30 rounded-lg p-3">
                          <a 
                            href={reference} 
                            target="_blank" 
                            rel="noopener noreferrer"
                            className="text-blue-400 hover:text-blue-300 text-sm break-all"
                          >
                            {reference}
                          </a>
                        </div>
                      ))}
                    </div>
                  </div>

                  {/* Tags */}
                  <div>
                    <h4 className="text-lg font-bold text-white mb-4">Tags</h4>
                    <div className="flex flex-wrap gap-2">
                      {selectedVuln.tags.map((tag, index) => (
                        <span key={index} className="px-2 py-1 bg-purple-500/20 text-purple-400 rounded text-xs">
                          {tag}
                        </span>
                      ))}
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}

        {/* Built with Bolt Badge */}
        <div className="mt-12 text-center">
          <div className="inline-flex items-center px-6 py-3 bg-gradient-to-r from-blue-500/20 to-purple-500/20 border border-blue-500/30 rounded-xl">
            <Zap className="w-5 h-5 text-blue-400 mr-2" />
            <span className="text-blue-400 font-medium">Built with Bolt</span>
          </div>
        </div>
      </div>
    </div>
  );
};

export default VulnerabilityManagement;